import { longestPalindrome } from './longest-palindromic-substring';

const long_str = '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';

describe('longest palindromic substring', () => {
  test('one found case', () => {
    expect(longestPalindrome('abc')).toBe('a');
    expect(longestPalindrome('aaa')).toBe('aaa');
    expect(longestPalindrome('aabc')).toBe('aa');
    expect(longestPalindrome('aabccdaaa')).toBe('aaa');
    expect(longestPalindrome('abaaba')).toBe('abaaba');
    expect(longestPalindrome('abanmaba')).toBe('aba');
    expect(longestPalindrome('aacabdkacaa')).toBe('aca');
    expect(longestPalindrome(long_str)).toBe(long_str);
  });
  test('some found cases', () => {
    expect(longestPalindrome('aabccd')).toMatch(/aa|cc/);
    expect(longestPalindrome('aabccdaa')).toMatch(/aa|cc/);
    expect(longestPalindrome('babad')).toMatch(/bab|aba/);

  });
});

