import { longestPalindrome } from './longest-palindromic-substring';

const long_str

describe('longest palindromic substring', () => {
  test.each([
    { str: 'abc', expected: 'a' },
    { str: 'aaa', expected: 'aaa' },
    { str: 'aabc', expected: 'aa' },
    { str: 'aabccdaaa', expected: 'aaa' },
    { str: 'abaaba', expected: 'abaaba' },
    { str: 'abanmaba', expected: 'aba' },
    { str: 'aacabdkacaa', expected: 'aca' },
    { str: long_str, expected: long_str },
  ])('one found case', ({ str, expected }) => {
    expect(longestPalindrome(str)).toBe(expected);
  });
  test.each([
    { str: 'aabccd', expected: /aa|cc/ },
    { str: 'aabccdaa', expected: /aa|cc/ },
    { str: 'babad', expected: /bab|aba/ },
  ])('some found cases', ({ str, expected }) => {
    expect(longestPalindrome(str)).toMatch(expected);
  });
});

